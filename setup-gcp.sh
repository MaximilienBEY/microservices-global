#!/bin/bash

# Complete setup script for Movie App on Google Cloud Platform
# This script guides you through the entire setup process

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

print_header() {
    echo -e "${PURPLE}=================================${NC}"
    echo -e "${PURPLE}  Movie App GCP Setup Script${NC}"
    echo -e "${PURPLE}=================================${NC}"
    echo ""
}

print_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Get user input for configuration
get_configuration() {
    print_step "Getting configuration information..."
    
    echo "Please provide the following information:"
    echo ""
    
    read -p "GCP Project ID: " PROJECT_ID
    read -p "Domain name (e.g., movie-app.yourdomain.com): " DOMAIN_NAME
    read -p "GCP Region [us-central1]: " REGION
    REGION=${REGION:-us-central1}
    read -p "Environment [prod]: " ENVIRONMENT
    ENVIRONMENT=${ENVIRONMENT:-prod}
    
    echo ""
    print_info "Configuration:"
    echo "  Project ID: $PROJECT_ID"
    echo "  Domain: $DOMAIN_NAME"
    echo "  Region: $REGION"
    echo "  Environment: $ENVIRONMENT"
    echo ""
    
    read -p "Is this correct? (y/N): " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_warning "Please run the script again with correct information."
        exit 1
    fi
}

# Setup GCP project
setup_gcp_project() {
    print_step "Setting up GCP project..."
    
    # Set the project
    gcloud config set project $PROJECT_ID
    
    # Enable billing (user needs to do this manually)
    print_warning "Please ensure billing is enabled for project $PROJECT_ID"
    read -p "Press Enter when billing is enabled..."
    
    print_success "GCP project configured."
}

# Create terraform.tfvars
create_terraform_vars() {
    print_step "Creating Terraform configuration..."
    
    cd terraform
    
    cat > terraform.tfvars << EOF
# Generated by setup script

# Required
project_id = "$PROJECT_ID"

# Customization
project_name = "movie-app"
region = "$REGION"
zone = "$REGION-a"
environment = "$ENVIRONMENT"

# Domain
domain_name = "$DOMAIN_NAME"

# GKE Configuration
node_count = 3
machine_type = "e2-medium"
disk_size_gb = 50
min_node_count = 1
max_node_count = 5

# Database Configuration
database_tier = "db-f1-micro"
database_name = "movie"
database_user = "movie"

# Redis Configuration
redis_memory_size_gb = 1
EOF
    
    print_success "Terraform configuration created."
    cd ..
}

# Update Cloud Build configurations
update_cloudbuild_configs() {
    print_step "Updating Cloud Build configurations..."
    
    # Update the cloudbuild file with correct project ID
    sed -i.bak "s/PROJECT_ID/$PROJECT_ID/g" cloudbuild-auth.yaml
    rm cloudbuild-auth.yaml.bak 2>/dev/null || true
    
    # Update Kubernetes configurations
    find terraform/k8s -name "*.yaml" -exec sed -i.bak "s/PROJECT_ID/$PROJECT_ID/g" {} \;
    find terraform/k8s -name "*.bak" -delete 2>/dev/null || true
    
    print_success "Cloud Build configurations updated."
}

# Deploy infrastructure
deploy_infrastructure() {
    print_step "Deploying infrastructure..."
    
    cd terraform
    
    # Initialize Terraform first
    print_info "Initializing Terraform..."
    terraform init
    
    # Then deploy
    ./deploy.sh deploy
    cd ..
    
    print_success "Infrastructure deployed."
}

# Get deployment outputs
get_deployment_outputs() {
    print_step "Getting deployment information..."
    
    cd terraform
    
    EXTERNAL_IP=$(terraform output -raw external_ip_address)
    CLUSTER_NAME=$(terraform output -raw gke_cluster_name)
    DB_PASSWORD_SECRET=$(terraform output -raw database_password_secret_name)
    DB_PRIVATE_IP=$(terraform output -raw database_private_ip)
    REDIS_HOST=$(terraform output -raw redis_host)
    ARTIFACT_REGISTRY_URL=$(terraform output -raw artifact_registry_url)
    
    cd ..
    
    print_info "Deployment Information:"
    echo "  External IP: $EXTERNAL_IP"
    echo "  Cluster Name: $CLUSTER_NAME"
    echo "  Database IP: $DB_PRIVATE_IP"
    echo "  Redis Host: $REDIS_HOST"
    echo "  Artifact Registry: $ARTIFACT_REGISTRY_URL"
}

# Update Kubernetes secrets with real values
update_k8s_secrets() {
    print_step "Updating Kubernetes secrets..."
    
    cd terraform
    
    # Get the database password from Secret Manager
    DB_PASSWORD=$(gcloud secrets versions access latest --secret="$DB_PASSWORD_SECRET")
    
    cd ..
    
    # Update the secrets file
    sed -i.bak "s/PASSWORD/$DB_PASSWORD/g" terraform/k8s/secrets.yaml
    sed -i.bak "s/PRIVATE_IP/$DB_PRIVATE_IP/g" terraform/k8s/secrets.yaml
    sed -i.bak "s/REDIS_HOST/$REDIS_HOST/g" terraform/k8s/secrets.yaml
    rm terraform/k8s/secrets.yaml.bak 2>/dev/null || true
    
    print_success "Kubernetes secrets updated."
}

# Deploy secrets to Kubernetes
deploy_k8s_secrets() {
    print_step "Deploying Kubernetes secrets..."
    
    kubectl apply -f terraform/k8s/secrets.yaml
    
    print_success "Kubernetes secrets deployed."
}

# Show next steps
show_next_steps() {
    print_step "Setup completed! Next steps:"
    
    echo ""
    echo "1. DNS Configuration:"
    echo "   Point your domain '$DOMAIN_NAME' to IP: $EXTERNAL_IP"
    echo ""
    echo "2. Wait for SSL Certificate:"
    echo "   Run: gcloud compute ssl-certificates list"
    echo "   Wait until status shows 'ACTIVE' (10-60 minutes)"
    echo ""
    echo "3. Build and Push Docker Images:"
    echo "   For each service, run:"
    echo "   docker build -t $ARTIFACT_REGISTRY_URL/movie-app-auth:latest -f apps/auth/Dockerfile ."
    echo "   docker push $ARTIFACT_REGISTRY_URL/movie-app-auth:latest"
    echo "   (Repeat for user, movie, cinema, reservation services)"
    echo ""
    echo "4. Deploy Applications:"
    echo "   kubectl apply -f terraform/k8s/auth-deployment.yaml"
    echo "   (Create similar deployments for other services)"
    echo ""
    echo "5. Verify Deployment:"
    echo "   kubectl get pods"
    echo "   kubectl get services"
    echo ""
    echo "6. Access Your Application:"
    echo "   https://$DOMAIN_NAME"
    echo ""
    print_success "Setup completed successfully!"
}

# Main setup function
main() {
    print_header
    
    print_info "This script will set up your Movie App infrastructure on Google Cloud Platform."
    print_warning "This will create resources that may incur costs."
    echo ""
    
    read -p "Do you want to continue? (y/N): " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_warning "Setup cancelled."
        exit 0
    fi
    
    get_configuration
    setup_gcp_project
    create_terraform_vars
    update_cloudbuild_configs
    deploy_infrastructure
    get_deployment_outputs
    update_k8s_secrets
    deploy_k8s_secrets
    show_next_steps
}

# Run main function
main
