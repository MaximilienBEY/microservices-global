// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid       String   @id @default(uuid())
  name      String
  email     String   @unique
  role      String   @default("USER")
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refresh_tokens RefreshToken[]
  reservations   Reservation[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiredAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userUid], references: [uid])

  userUid String

  @@map("refresh_tokens")
}

model Category {
  uid       String   @id @default(uuid())
  name      String   @unique
  movies    Movie[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Poster {
  uid       String   @id @default(uuid())
  url       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  movieUid String @unique
  movie    Movie  @relation(fields: [movieUid], references: [uid])

  @@map("posters")
}

model Movie {
  uid         String   @id @default(uuid())
  name        String
  description String
  rate        Int
  duration    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  poster     Poster?
  categories Category[]
  sceances   Sceance[]

  @@map("movies")
}

model Cinema {
  uid       String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rooms Room[]

  @@map("cinemas")
}

model Room {
  uid       String   @id @default(uuid())
  name      String
  seats     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cinemaUid String
  cinema    Cinema @relation(fields: [cinemaUid], references: [uid])

  sceances Sceance[]

  @@map("rooms")
}

model Sceance {
  uid       String   @id @default(uuid())
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roomUid String
  room    Room   @relation(fields: [roomUid], references: [uid])

  movieUid String
  movie    Movie  @relation(fields: [movieUid], references: [uid])

  reservations Reservation[]

  @@map("sceances")
}

enum ReservationStatus {
  OPEN
  PENDING
  EXPIRED
  CONFIRMED
}

model Reservation {
  uid       String            @id @default(uuid())
  status    ReservationStatus
  nbSeats   Int
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  expiresAt DateTime?

  userUid String
  user    User   @relation(fields: [userUid], references: [uid])

  sceanceUid String
  sceance    Sceance @relation(fields: [sceanceUid], references: [uid])

  @@map("reservations")
}
